}
safetyInterval<-function(x, df) {
return(df - brakingDistance(x) + totalDistance(x))
}
#KAPPA
#Avg length
Pc <- 0.94
Pb <- 0.01
Pt <- 0.05
Lc <- 5
Lb <- 10
Lt <- 15
averageL <- Pc*Lc + Pb*Lb + Pt*Lt
#Average df needed
carcar <- Pc*Pc
carbus <- Pc*Pb
cartruck <- Pc*Pt
buscar <- Pb*Pc
busbus <- Pb*Pb
bustruck <- Pb*Pt
truckcar <- Pt*Pc
truckbus <- Pt*Pb
trucktruck <- Pt*Pt
shortD <- 10
mediumD <- 20
longD <- 30
averageDf <- (carcar+carbus+cartruck+busbus+bustruck +trucktruck)*shortD + (buscar)*mediumD + (truckcar+truckbus)*longD
kappa <- function(x, df) {
result <- 1/(averageL + safetyInterval(x,df))
return(result)
}
#PHI
phi <- function(x, df) {
kappa(x,df)*(x/3.6)
}
# %speed reduction coefficient
sr <- 0.92
MFV <- function(v, df, n){
sum <- 0
for (k in 1:n) {
sum <- sum + phi(v*((sr)**(k-1)), df)
}
return(sum)
}
speeds <- c(88,97, 105, 113)
lanes <- c(2,3,4,5,6,7)
result = list()
i <- 0
for (speed in speeds) {
for (lane in lanes) {
print(speed)
print(MFV(speed, averageDf, lane)*3600)
}
}
#cruising speed average
cruisingspeed<-function(v, n) {
sum <- 0
for (k in 0:n) {
print(k)
sum <- sum + v*(0.92)**k
}
return(sum)
}
cruisingspeed(100, 5)
#cruising speed average
cruisingspeed<-function(v, n) {
sum <- 0
for (k in 1:n) {
sum <- sum + v*(0.92)**(k-1)
}
return(sum/n)
}
for (i in (2:7)){
for (j in c(88,96,104,113)) {
print(i, j)
print(cruisingspeed(j,i))
}
}
#cruising speed average
cruisingspeed<-function(v, n) {
sum <- 0
for (k in 1:n) {
sum <- sum + v*(0.92)**(k-1)
}
return(sum/n)
}
for (i in (2:7)){
for (j in c(88,96,104,113)) {
print("lanes : " + i)
print("speed : " + j)
print(cruisingspeed(j,i))
}
}
#cruising speed average
cruisingspeed<-function(v, n) {
sum <- 0
for (k in 1:n) {
sum <- sum + v*(0.92)**(k-1)
}
return(sum/n)
}
for (i in (2:7)){
for (j in c(88,96,104,113)) {
print("lanes : %d", i)
print("speed : %d", j)
print(cruisingspeed(j,i))
}
}
#cruising speed average
cruisingspeed<-function(v, n) {
sum <- 0
for (k in 1:n) {
sum <- sum + v*(0.92)**(k-1)
}
return(sum/n)
}
for (i in (2:7)){
for (j in c(88,96,104,113)) {
print(cruisingspeed(j,i))
}
}
#cruising speed average
cruisingspeed<-function(v, n) {
sum <- 0
for (k in 1:n) {
sum <- sum + v*(0.92)**(k-1)
}
return(sum/n)
}
for (i in (2:7)){
for (j in c(88,96,104,113)) {
print(i)
print(j)
print(cruisingspeed(j,i))
}
}
info <- 113*(0.92)**6
info <- 113*(0.92)**5
#Violon Plot
library(ggplot2)
library(dplyr)
mydata = read.csv("MVFALLCSV.csv") #read csv file
mydata = subset(mydata, select = -c(X))
mydata
#Subset of the data, without zero and numeric
data4_96 <- as.numeric(gsub(",",".",as.character(unlist(lapply(subset(mydata, select = -c(X0,X0.1,X0.2,X0.3,X0.4,X0.5,X0.6)), function(x) {x[x!=0]})))))/3.6
data6_105 <- as.numeric(gsub(",",".",as.character(unlist(lapply(subset(mydata, select = -c(X14112,X0.1,X0.2,X0.3,X0.4,X0.5,X0.6)), function(x) {x[x!=0]})))))/5.6
data3_96 <- as.numeric(gsub(",",".",as.character(unlist(lapply(subset(mydata, select = -c(X14112,X0,X0.2,X0.3,X0.4,X0.5,X0.6)), function(x) {x[x!=0]})))))/2.6
data4_88 <- as.numeric(gsub(",",".",as.character(unlist(lapply(subset(mydata, select = -c(X14112,X0,X0.1,X0.3,X0.4,X0.5,X0.6)), function(x) {x[x!=0]})))))/3.6
data5_96 <- as.numeric(gsub(",",".",as.character(unlist(lapply(subset(mydata, select = -c(X14112,X0,X0.2,X0.1,X0.4,X0.5,X0.6)), function(x) {x[x!=0]})))))/4.6
data3_88 <- as.numeric(gsub(",",".",as.character(unlist(lapply(subset(mydata, select = -c(X14112,X0,X0.2,X0.3,X0.1,X0.5,X0.6)), function(x) {x[x!=0]})))))/2.6
data5_88 <- as.numeric(gsub(",",".",as.character(unlist(lapply(subset(mydata, select = -c(X14112,X0,X0.2,X0.3,X0.4,X0.1,X0.6)), function(x) {x[x!=0]})))))/4.6
#data4_105 <- as.numeric(gsub(",",".",as.character(unlist(lapply(subset(mydata, select = -c(X14112,X0,X0.2,X0.3,X0.4,X0.5,X0.1)), function(x) {x[x!=0]})))))/3.6
#data4_96 <- lapply(data4_96, function(x) {x[x<6000]})
#data6_105 <- lapply(data6_105, function(x) {x[x<6000]})
#data3_96 <- lapply(data3_96, function(x) {x[x<6000]})
#data4_88 <- lapply(data4_88, function(x) {x[x<6000]})
#data5_96 <- lapply(data5_96, function(x) {x[x<6000]})
#data3_88 <- lapply(data3_88, function(x) {x[x<6000]})
#data5_88 <- lapply(data5_88, function(x) {x[x<6000]})
#data4_105 <- lapply(data4_105, function(x) {x[x<6000]})
data3_96 <-data3_96[data3_96<6000]
data3_88 <-data3_88[data3_88<6000]
data4_88 <-data4_88[data4_88<6000]
#Multiple Plot
#create data and values vector
data <- data.frame(
Combination=c( rep("4-96", length(data4_96)),rep("6-105", length(data6_105)) ,rep("3-96", length(data3_96)), rep("4-88", length(data4_88)),
rep("5-96", length(data5_96)), rep("3-88", length(data3_88)), rep("5-88", length(data5_88)), rep("4-105", length(data4_105))),
RealFlux=c(data4_96, data6_105,data3_96, data4_88, data5_96, data3_88, data5_88, data4_105)
)
pmul <- ggplot(data, aes(x=Combination, y=RealFlux, fill=Combination), title(main="test")) + geom_violin() + xlab('Combination (lanes - speed)') + ylab('Real Flux per lane') + ggtitle("Violin plot of the Real FLux per Lane for the 8 most represented combination")
pmul
#Comparative1
data1 <- data.frame(
Combination=c( rep("4-96", length(data4_96)),rep("6-105", length(data6_105))),
RealFlux=c(data4_96, data6_105)
)
p2 <- ggplot(data1, aes(x=Combination, y=RealFlux, fill=Combination), title(main="test")) + geom_violin() + xlab('Combination (lanes - speed)') + ylab('Real Flux') + ggtitle("Violin plot of the Real FLux for the 2 most repesented combination")
p2
#OverView 6 most
data <- data.frame(
Combination=c( rep("4-96", length(data4_96)), rep("6-105", length(data6_105)),rep("3-96", length(data3_96)), rep("4-88", length(data4_88)),
rep("5-96", length(data5_96)), rep("3-88", length(data3_88))),
RealFlux=c(data4_96,data6_105 ,data3_96, data4_88, data5_96, data3_88)
)
pmul <- ggplot(data, aes(x=Combination, y=RealFlux, fill=Combination), title(main="test")) + geom_violin() + xlab('Combination (lanes - speed)') + ylab('Real Flux') + ylim(c(5000,40000)) + ggtitle("Violin plot of the Real FLux for the 6 most represented combination")
pmul
#Comparative1
data2 <- data.frame(
Combination=c( rep("5-96", length(data5_96)),rep("6-105", length(data6_105)), rep("4-105", length(data4_105))),
RealFlux=c(data5_96, data6_105, data4_105)
)
p3 <- ggplot(data2, aes(x=Combination, y=RealFlux, fill=Combination), title(main="test")) + geom_violin() + xlab('Combination (lanes - speed)') + ylab('Real Flux per Lane') + ggtitle("Violin plot of the Real FLux per Lane for 3 combinations")
p3
#Comparative2
data3 <- data.frame(
Combination=c( rep("4-96", length(data4_96)),rep("4-88", length(data4_88))),
RealFlux=c(data4_96, data4_88)
)
p3 <- ggplot(data3, aes(x=Combination, y=RealFlux, fill=Combination), title(main="test")) + geom_violin() + xlab('Combination (lanes - speed)') + ylab('Real Flux') + ggtitle("Violin plot of the Real FLux for '2' close combination")
p3
#Comparative3
data4 <- data.frame(
Combination=c( rep("3-96", length(data3_96)),rep("3-88", length(data3_88))),
RealFlux=c(data3_96, data3_88)
)
p4 <- ggplot(data4, aes(x=Combination, y=RealFlux, fill=Combination), title(main="test")) + geom_violin() + xlab('Combination (lanes - speed)') + ylab('Real Flux') + ggtitle("Violin plot of the Real FLux for '2' close combination")
p4
#Comparative4
data5 <- data.frame(
Combination=c( rep("3-96", length(data3_96)),rep("3-88", length(data3_88)), rep("4-96", length(data4_96)),rep("4-88", length(data4_88)), rep("5-88", length(data5_88))),
RealFlux=c(data3_96, data3_88,data4_96, data4_88, data5_88)
)
p5 <- ggplot(data5, aes(x=Combination, y=RealFlux, fill=Combination), title(main="test")) + geom_violin() + xlab('Combination (lanes - speed)') + ylab('Real Flux per Lane') + ggtitle("Violin plot of the Real FLux per Lane for 5 combinations")
p5
#Comparative5
data6 <- data.frame(
Combination=c( rep("5-96", length(data5_96)), rep("4-96", length(data4_96)),rep("4-88", length(data4_88))),
RealFlux=c(data5_96,data4_96, data4_88)
)
p6 <- ggplot(data6, aes(x=Combination, y=RealFlux, fill=Combination), title(main="test")) + geom_violin() + xlab('Combination (lanes - speed)') + ylab('Real Flux') + ggtitle("Violin plot of the Real FLux for 3 close combination")
p6
#MVF
#DELTA
x <- seq(0, 140, 1)
mu <- 0.7 #adherance coeff
g <- 9.80665 #gravity on earth
t <- 1.5 #reaction time
brakingDistance<-function(x) {
xsec <- x/3.6
xsec
braking <- (xsec^2)/(2*mu*g)
return(braking)
}
reactionTimeDistance<-function(x){
xsec <- x/3.6
distance <- t*xsec
return(distance)
}
totalDistance <- function(x) {
return(brakingDistance(x) + reactionTimeDistance(x))
}
safetyInterval<-function(x, df) {
return(df - brakingDistance(x) + totalDistance(x))
}
#KAPPA
#Avg length
Pc <- 0.94
Pb <- 0.01
Pt <- 0.05
Lc <- 5
Lb <- 10
Lt <- 15
averageL <- Pc*Lc + Pb*Lb + Pt*Lt
#Average df needed
carcar <- Pc*Pc
carbus <- Pc*Pb
cartruck <- Pc*Pt
buscar <- Pb*Pc
busbus <- Pb*Pb
bustruck <- Pb*Pt
truckcar <- Pt*Pc
truckbus <- Pt*Pb
trucktruck <- Pt*Pt
shortD <- 10
mediumD <- 20
longD <- 30
averageDf <- (carcar+carbus+cartruck+busbus+bustruck +trucktruck)*shortD + (buscar)*mediumD + (truckcar+truckbus)*longD
kappa <- function(x, df) {
result <- 1/(averageL + safetyInterval(x,df))
return(result)
}
#PHI
phi <- function(x, df) {
kappa(x,df)*(x/3.6)
}
# %speed reduction coefficient
sr <- 0.92
MFV <- function(v, df, n){
if (n > 2) {
sum <- 0
for (k in 3:n) {
sum <- sum + phi(v, df)
}
sum <- sum + phi(v*0.85, df)
sum <- sum + phi(v*0.75, df)
} else {
sum <- 0
sum <- sum + phi(v, df)
sum <- sum + phi(v*0.85, df)
}
return(sum)
}
speeds <- c(88,97, 105, 113)
lanes <- c(2,3,4,5,6,7)
result = list()
i <- 0
for (speed in speeds) {
for (lane in lanes) {
print(speed)
print(MFV(speed, averageDf, lane)*3600)
}
}
#Density Combinaison plot :
mydata = read.csv("ALLSECTIONPERLANEMODIFCSV.csv") #read csv file
mydata
# Remove '0' from data
dataall <- as.numeric(gsub(",",".",as.character(unlist(lapply(mydata, function(x) {x[x!=0]})))))
dataall <- na.exclude(dataall)
dataall
#Density Combinaison plot :
mydata2= read.csv("ALLSECTIONPERLANECSV.csv") #read csv file
mydata2
# Remove '0' from data
dataall2 <- as.numeric(gsub(",",".",as.character(unlist(lapply(mydata2, function(x) {x[x!=0]})))))
dataall2 <- na.exclude(dataall2)
dataall2
group1 <- mean(c(4633,
4382,
4382,
4070,
4414,
4351,
4289,
4696,
4170,
4230,
3656,
4140))
group2 <- mean(c(4070,
4664,
3990,
3960,
3990,
4500,
4170,
4350))
group3 <- mean(c(4320,
4414,
4257,
4226,
4539,
4445))
group4 <- mean(c(4383,
4195,
4484,
4516))
group5 <- mean(c(4226,
4163,
4696,
4539,
3960,
6944,
4226))
group6 <- mean(c(4140,
4050,
4140,
3930,
4200))
group7 <- mean(c(4633,
4069,
4163))
group1bis <- 5618.91666666667
group2bis <- 5711.22222222222
group3bis <- 5657
group4bis <- 5391.75
group5bis <- 6145.42857142857
group6bis <- 5665
group7bis <- 5480
#Plot Density function for each value
plot(density(dataall), xlab = "Real Flux per lane", main = "Density function of the Real Flux per lane for all section", col='red')
lines(density(dataall2))
abline(v=group1, col='red')
abline(v=group2, col='red')
abline(v=group3, col='red')
abline(v=group4, col='red')
abline(v=group5, col='red')
abline(v=group6, col='red')
abline(v=group7, col='red')
abline(v=group1bis, col='black')
abline(v=group2bis, col='black')
abline(v=group3bis, col='black')
abline(v=group4bis, col='black')
abline(v=group5bis, col='black')
abline(v=group6bis, col='black')
abline(v=group7bis, col='black')
legend("topright", c("Density Function after modification", "AVG flux for all groups after modification", "Density Function before modification", "AVG flux for all groups before modification"), fill=c("red", "red", "black", "black", "yellow", "purple", "pink", "dark green"))
install.packages("installr")
install.packages("installr")
install.packages("installr")
install.packages("installr")
x_train = read.csv("X_train.csv")
x_train
setwd("~/Documents/Zurich/MA1/Adv ML/Project/task1/MRI")
x_train = read.csv("X_train.csv")
x_train
for(i in 2:ncol(x_train)){
lower_bound <- median(x_train[,i]) - 3 * mad(x_train[,i])
upper_bound <- median(x_train[,i]) + 3 * mad(x_train[,i])
outlier_ind <- which(x_train[,i] < lower_bound | x_train[,i] > upper_bound)
outlier_ind
#for (j in 1:length(outlier_ind)){
#x_train[outlier_ind[j],i] <- NA
#}
#outlier_samples_list <- list(outlier_samples_list, outlier_ind)
#for (j in 1:length(outlier_ind)){
#outlier_samples_list <- append(outlier_samples_list, outlier_ind[j])
#}
#outlier_samples_list[[length(outlier_samples_list)+1]] <- list(outlier_ind)
}
x_train
View(x_train)
#outlier_samples_list <- c()
for(i in 2:ncol(x_train)){
lower_bound <- median(x_train[,i]) - 3 * mad(x_train[,i])
upper_bound <- median(x_train[,i]) + 3 * mad(x_train[,i])
outlier_ind <- which(x_train[,i] < lower_bound | x_train[,i] > upper_bound)
outlier_ind
for (j in 1:length(outlier_ind)){
x_train[outlier_ind[j],i] <- NA
}
#outlier_samples_list <- list(outlier_samples_list, outlier_ind)
#for (j in 1:length(outlier_ind)){
#outlier_samples_list <- append(outlier_samples_list, outlier_ind[j])
#}
#outlier_samples_list[[length(outlier_samples_list)+1]] <- list(outlier_ind)
}
#outlier_samples_list <- c()
for(i in 2:ncol(x_train)){
lower_bound <- median(x_train[,i]) - 3 * mad(x_train[,i])
upper_bound <- median(x_train[,i]) + 3 * mad(x_train[,i])
outlier_ind <- which(x_train[,i] < lower_bound | x_train[,i] > upper_bound)
outlier_ind
for (j in 1:length(outlier_ind)){
x_train[outlier_ind[j],i] <- 0
}
#outlier_samples_list <- list(outlier_samples_list, outlier_ind)
#for (j in 1:length(outlier_ind)){
#outlier_samples_list <- append(outlier_samples_list, outlier_ind[j])
#}
#outlier_samples_list[[length(outlier_samples_list)+1]] <- list(outlier_ind)
}
for(i in 2:ncol(x_train)){
lower_bound <- median(x_train[,i]) - 3 * mad(x_train[,i])
upper_bound <- median(x_train[,i]) + 3 * mad(x_train[,i])
outlier_ind <- which(x_train[,i] < lower_bound | x_train[,i] > upper_bound)
outlier_ind
for (j in 1:length(outlier_ind)){
x_train[outlier_ind[j],i] <- 0
}
#outlier_samples_list <- list(outlier_samples_list, outlier_ind)
#for (j in 1:length(outlier_ind)){
#outlier_samples_list <- append(outlier_samples_list, outlier_ind[j])
#}
#outlier_samples_list[[length(outlier_samples_list)+1]] <- list(outlier_ind)
}
#outlier_samples_list <- c()
for(i in 2:ncol(x_train)){
lower_bound <- median(x_train[,i]) - 3 * mad(x_train[,i])
upper_bound <- median(x_train[,i]) + 3 * mad(x_train[,i])
outlier_ind <- which(x_train[,i] < lower_bound | x_train[,i] > upper_bound)
outlier_ind
for (j in 1:length(outlier_ind)){
print(outlier_ind[j])
# x_train[outlier_ind[j],i] <- 0
}
#outlier_samples_list <- list(outlier_samples_list, outlier_ind)
#for (j in 1:length(outlier_ind)){
#outlier_samples_list <- append(outlier_samples_list, outlier_ind[j])
#}
#outlier_samples_list[[length(outlier_samples_list)+1]] <- list(outlier_ind)
}
for (j in 1:length(outlier_ind)){
print(as.list(outlier_ind)[j])
# x_train[outlier_ind[j],i] <- 0
}
#outlier_samples_list <- c()
for(i in 2:ncol(x_train)){
lower_bound <- median(x_train[,i]) - 3 * mad(x_train[,i])
upper_bound <- median(x_train[,i]) + 3 * mad(x_train[,i])
outlier_ind <- which(x_train[,i] < lower_bound | x_train[,i] > upper_bound)
outlier_ind
for (j in 1:length(outlier_ind)){
print(as.list(outlier_ind)[j])
# x_train[outlier_ind[j],i] <- 0
}
#outlier_samples_list <- list(outlier_samples_list, outlier_ind)
#for (j in 1:length(outlier_ind)){
#outlier_samples_list <- append(outlier_samples_list, outlier_ind[j])
#}
#outlier_samples_list[[length(outlier_samples_list)+1]] <- list(outlier_ind)
}
x_train = read.csv("X_train.csv")
x_train
#outlier_samples_list <- c()
for(i in 2:ncol(x_train)){
lower_bound <- median(x_train[,i]) - 3 * mad(x_train[,i])
upper_bound <- median(x_train[,i]) + 3 * mad(x_train[,i])
outlier_ind <- which(x_train[,i] < lower_bound | x_train[,i] > upper_bound)
outlier_ind
print(outlier_ind)
for (j in 1:length(outlier_ind)){
# print(as.list(outlier_ind)[j])
# x_train[outlier_ind[j],i] <- 0
}
#outlier_samples_list <- list(outlier_samples_list, outlier_ind)
#for (j in 1:length(outlier_ind)){
#outlier_samples_list <- append(outlier_samples_list, outlier_ind[j])
#}
#outlier_samples_list[[length(outlier_samples_list)+1]] <- list(outlier_ind)
}
